# ShinyFMBN v2_5-----------------------------------------------------
# a Shiny app to explore, filter and extract data from FoodMicrobionet (v4.2, compatible with 3.2.8)
# preparatory steps -------------------------------------------------------
# install/load packages ---------------------------------------------------
.cran_packages <-
c(
"shiny",
"data.table",
"DT",
"tidyverse",
"reshape2",
"stringr",
"lubridate",
"igraph",
"magrittr",
"randomcoloR",
"forcats"
)
.bioc_packages <- c(
"BiocManager",
"phyloseq"
)
.inst <- .cran_packages %in% installed.packages()
if (any(!.inst)) {
install.packages(.cran_packages[!.inst])
}
.inst <- .bioc_packages %in% installed.packages()
if(any(!.inst)) {
if(!.inst[1]) {
install.packages("BiocManager")
.inst <- .bioc_packages %in% installed.packages()
}
if(any(!.inst[2:length(.inst)])) {
BiocManager::install(.bioc_packages[!.inst], ask = F)
}
}
sapply(c(.cran_packages, .bioc_packages), require,
character.only = TRUE)
# options -----------------------------------------------------------------
# debug mode
# set to true and extra information for cross checking will appear in the filter and aggregate tabs
debug_mode <- T
# options for filtering
# set to 0 so the user has to move them
minprev <-
0 # the default minimum for prevalence filtering (see Export pane/Prevalence graph tab)
minab <-
0 # the default minimum for abundance filtering (see Export pane/Prevalence graph tab)
# default options for ggsave (changes here will apply to every ggsave in the app)
g_width <- 7
g_height <- 5
g_units = "in"
g_dpi <- 150
g_ext <- "jpg" # use "jpg", "tif" or "pdf"
# max taxa for barplots and boxplots
max_taxa <- 25
# max "samples" or sample categories for barplots and boxplots
max_samples <- 25
# nchar for str_wrap in graphs, needed to fine tune x-axis labels on some graphs
str_wrap_length <- 20
# renumber samples in lists for export
renumber_samples <- FALSE
# the random palette
rpalette <- distinctColorPalette(max_taxa)
# load and assemble  -------------------------------------
# load the list (from the data folder) using a platform independent path
# which version do you want to load?
version_to_load <- "B" # or "F"
FMBN <- readRDS(
file.path("data", str_c("FMBN_",version_to_load,".rds", sep =""))
)
studies <- FMBN$studies
samples <- FMBN$samples
edges <- FMBN$edges
taxa <- FMBN$taxa
references <- FMBN$references
version <- FMBN$version
# generate minitables for display
studies_disp <- studies %>%
dplyr::select(
studyId,
FMBN_version,
target,
region,
platform,
seq_center,
bioinf_software,
OTU_picking,
assign_tax_method,
tax_database,
Seq_accn,
Seq_accn_link,
short_descr,
samples,
ref_short,
DOI,
DOI_link
)
studies_disp <- studies_disp %>%
mutate(
target = paste(target, ", ", region, sep = ""),
pipeline = str_c(
bioinf_software,
OTU_picking,
assign_tax_method,
tax_database,
sep = "; "
),
SRA_ENA = ifelse(
is.na(Seq_accn),
"not available",
paste0(
"<a href='",
Seq_accn_link,
"' target='_blank'>",
Seq_accn,
"</a>"
)
),
DOIlink = ifelse(
DOI == "unpublished data",
"unpublished data",
paste0("<a href='",
DOI_link,
"' target='_blank'>",
DOI, "</a>")
)
) %>%
dplyr::select(
studyId,
FMBN_version,
target,
platform,
pipeline,
samples,
SRA_ENA,
ref_short,
DOIlink,
short_descr
)
# generate lists for check box groups
s_type_list <- unique(samples$s_type)
nature_list <- unique(samples$nature)
process_list <- unique(samples$process)
spoilage_list <- unique(samples$spoilage)
target1_list <- c(DNA = "16S_DNA", RNA = "16S_RNA")
target2_list <- unique(samples$target2)
# generates a transformed table for sample selection
ssamples <- samples %>%
mutate_at(c("s_type", "nature", "process", "spoilage", "target1", "target2"),
as.factor)
n_studies <- nrow(studies)
n_samples <- nrow(samples)
n_food_groups <- n_distinct(samples$L1)
n_foodId <- n_distinct(samples$foodId)
n_llabel <- n_distinct(samples$llabel)
n_taxa <- nrow(taxa)
FMBN_summary_text <-
paste(
"There are",
n_studies,
"studies and",
n_samples,
"samples in this version of FoodMicrobionet.",
"The samples belong to",
n_food_groups,
"major food groups and",
n_foodId,
"different foods.",
"There are",
n_llabel,
"different combinations of food, nature, process, fermentation/spoilage.",
n_taxa,
"taxa have been identified at different taxonomic levels."
)
group_text <- if_else(version_to_load == "B", " bacterial")
group_text <- if_else(version_to_load == "B", " bacterial", "fungal")
FMBN_summary_text <-
paste(
"There are",
n_studies,
"studies and",
n_samples,
"samples in this version of FoodMicrobionet, which includes data on",
group_text,
"Microbiota. The samples belong to",
n_food_groups,
"major food groups and",
n_foodId,
"different foods.",
"There are",
n_llabel,
"different combinations of food, nature, process, fermentation/spoilage.",
n_taxa,
"taxa have been identified at different taxonomic levels."
)
FMBN_summary_text
runApp()
fake_sample_selection <- c(1,2,3,7,200)
# rows_to_slice <- pull(f_fsamples()[input$ssamplestable_rows_all, 2])
rows_to_slice <- samples$sampleId %in% fake_sample_selection
which(samples$sampleId %in% fake_sample_selection)
View(samples)
# prova
fake_sample_selection
samples_filt_prova <- samples %>%
dplyr::filter(sampleId %in% fake_sample_selection)
View(samples_filt_prova)
runApp()
remove_what_finto <- 0
View(taxa)
which(taxa$label %in remove_what_finto)
remove_what_finto <- ""
which(taxa$label %in remove_what_finto)
taxa$label %in remove_what_finto
str(taxa$label)
taxa$label %in% NULL
taxa$label %in% "Other"
which(taxa$label %in% "Other")
to_remove_finto <- which(taxa$label %chin% "Other")
length(to_remove_finto)
to_remove_finto <- which(taxa$label %chin% c("Other","Fungi")
length(to_remove_finto)
to_remove_finto <- which(taxa$label %chin% c("Other","Fungi")
)
length(to_remove_finto)
to_remove_finto <- which(taxa$domain %chin% c("Other","Fungi"))
to_remove_finto <- which(taxa$domain %chin% NULL)
length(to_remove_finto)
runApp()
runApp()
View(taxa)
View(taxa)
View(taxa)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(studies)
runApp()
runApp()
runApp()
runApp()
# which version do you want to load?
version_to_load <- "F" # or "F"
selected_study <- if_else(version_to_load == "B", "ST1", "ST161")
FMBN <- readRDS(
file.path("data", str_c("FMBN_",version_to_load,".rds", sep =""))
)
studies <- FMBN$studies
View(FMBN)
runApp()
# ShinyFMBN v2_5-----------------------------------------------------
# a Shiny app to explore, filter and extract data from FoodMicrobionet (v5)
# preparatory steps -------------------------------------------------------
# install/load packages ---------------------------------------------------
# NOTE FOR SELF reshape2 is not maintained must replace occurrences of dcast
# and melt with pivot_wider and pivot_longer
.cran_packages <-
c(
"shiny",
"data.table",
"DT",
"tidyverse",
"reshape2",
"stringr",
"lubridate",
"igraph",
"magrittr",
"randomcoloR",
"forcats"
)
.bioc_packages <- c(
"BiocManager",
"phyloseq"
)
.inst <- .cran_packages %in% installed.packages()
if (any(!.inst)) {
install.packages(.cran_packages[!.inst])
}
.inst <- .bioc_packages %in% installed.packages()
if(any(!.inst)) {
if(!.inst[1]) {
install.packages("BiocManager")
.inst <- .bioc_packages %in% installed.packages()
}
if(any(!.inst[2:length(.inst)])) {
BiocManager::install(.bioc_packages[!.inst], ask = F)
}
}
sapply(c(.cran_packages, .bioc_packages), require,
character.only = TRUE)
# options -----------------------------------------------------------------
# debug mode
# set to true and extra information for cross checking will appear in the filter and aggregate tabs
debug_mode <- T
# options for filtering
# set to 0 so the user has to move them
minprev <-
0 # the default minimum for prevalence filtering (see Export pane/Prevalence graph tab)
minab <-
0 # the default minimum for abundance filtering (see Export pane/Prevalence graph tab)
# default options for ggsave (changes here will apply to every ggsave in the app)
g_width <- 7
g_height <- 5
g_units = "in"
g_dpi <- 150
g_ext <- "jpg" # use "jpg", "tif" or "pdf"
# max taxa for barplots and boxplots
max_taxa <- 25
# max "samples" or sample categories for barplots and boxplots
max_samples <- 25
# nchar for str_wrap in graphs, needed to fine tune x-axis labels on some graphs
str_wrap_length <- 20
# renumber samples in lists for export
renumber_samples <- FALSE
# the random palette
rpalette <- distinctColorPalette(max_taxa)
# load and assemble  -------------------------------------
# load the list (from the data folder) using a platform independent path
# which version do you want to load?
version_to_load <- "F" # or "F"
selected_study <- if_else(version_to_load == "B", "ST1", "ST161")
FMBN <- readRDS(
file.path("data", str_c("FMBN_",version_to_load,".rds", sep =""))
)
studies <- FMBN$studies
View(FMBN)
View(studies)
"ST161" %in% studies$studyId
studies$studyId
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# ShinyFMBN v2_5-----------------------------------------------------
# a Shiny app to explore, filter and extract data from FoodMicrobionet (v5)
# preparatory steps -------------------------------------------------------
# install/load packages ---------------------------------------------------
# NOTE FOR SELF reshape2 is not maintained must replace occurrences of dcast
# and melt with pivot_wider and pivot_longer
.cran_packages <-
c(
"shiny",
"data.table",
"DT",
"tidyverse",
"reshape2",
"stringr",
"lubridate",
"igraph",
"magrittr",
"randomcoloR",
"forcats"
)
.bioc_packages <- c(
"BiocManager",
"phyloseq"
)
.inst <- .cran_packages %in% installed.packages()
if (any(!.inst)) {
install.packages(.cran_packages[!.inst])
}
.inst <- .bioc_packages %in% installed.packages()
if(any(!.inst)) {
if(!.inst[1]) {
install.packages("BiocManager")
.inst <- .bioc_packages %in% installed.packages()
}
if(any(!.inst[2:length(.inst)])) {
BiocManager::install(.bioc_packages[!.inst], ask = F)
}
}
sapply(c(.cran_packages, .bioc_packages), require,
character.only = TRUE)
# options -----------------------------------------------------------------
# debug mode
# set to true and extra information for cross checking will appear in the filter and aggregate tabs
debug_mode <- T
# options for filtering
# set to 0 so the user has to move them
minprev <-
0 # the default minimum for prevalence filtering (see Export pane/Prevalence graph tab)
minab <-
0 # the default minimum for abundance filtering (see Export pane/Prevalence graph tab)
# default options for ggsave (changes here will apply to every ggsave in the app)
g_width <- 7
g_height <- 5
g_units = "in"
g_dpi <- 150
g_ext <- "jpg" # use "jpg", "tif" or "pdf"
# max taxa for barplots and boxplots
max_taxa <- 25
# max "samples" or sample categories for barplots and boxplots
max_samples <- 25
# nchar for str_wrap in graphs, needed to fine tune x-axis labels on some graphs
str_wrap_length <- 20
# renumber samples in lists for export
renumber_samples <- FALSE
# the random palette
rpalette <- distinctColorPalette(max_taxa)
# load and assemble  -------------------------------------
# load the list (from the data folder) using a platform independent path
# which version do you want to load?
version_to_load <- "F" # or "F"
selected_study <- if_else(version_to_load == "B", "ST1", "ST161")
FMBN <- readRDS(
file.path("data", str_c("FMBN_",version_to_load,".rds", sep =""))
)
studies <- FMBN$studies
samples <- FMBN$samples
edges <- FMBN$edges
taxa <- FMBN$taxa
references <- FMBN$references
version <- FMBN$version
# generate minitables for display
studies_disp <- studies %>%
dplyr::select(
studyId,
FMBN_version,
target,
region,
platform,
seq_center,
bioinf_software,
OTU_picking,
assign_tax_method,
tax_database,
Seq_accn,
Seq_accn_link,
short_descr,
samples,
ref_short,
DOI,
DOI_link
)
studies_disp <- studies_disp %>%
mutate(
target = paste(target, ", ", region, sep = ""),
pipeline = str_c(
bioinf_software,
OTU_picking,
assign_tax_method,
tax_database,
sep = "; "
),
SRA_ENA = ifelse(
is.na(Seq_accn),
"not available",
paste0(
"<a href='",
Seq_accn_link,
"' target='_blank'>",
Seq_accn,
"</a>"
)
),
DOIlink = ifelse(
DOI == "unpublished data",
"unpublished data",
paste0("<a href='",
DOI_link,
"' target='_blank'>",
DOI, "</a>")
)
) %>%
dplyr::select(
studyId,
FMBN_version,
target,
platform,
pipeline,
samples,
SRA_ENA,
ref_short,
DOIlink,
short_descr
)
# generate lists for check box groups
s_type_list <- unique(samples$s_type)
nature_list <- unique(samples$nature)
process_list <- unique(samples$process)
spoilage_list <- unique(samples$spoilage)
target1_list <- c(DNA = "16S_DNA", RNA = "16S_RNA")
target2_list <- unique(samples$target2)
# generates a transformed table for sample selection
ssamples <- samples %>%
mutate_at(c("s_type", "nature", "process", "spoilage", "target1", "target2"),
as.factor)
View(ssamples)
runApp()
runApp()
runApp()
View(FMBN$studies)
duplicated(FMBN$studies$studyId)
View(samples)
samples <- arrange(FMBN$samples, studyId, sampleId)
View(samples)
runApp()
runApp()
euk_labels_F <- taxa %>%
dplyr::filter(domain == "Eukaryota" | domain == "Fungi" | family == "Mitochondria" | class == "Chloroplast") %>%
pull(label)
runApp()
runApp()
runApp()
runApp()

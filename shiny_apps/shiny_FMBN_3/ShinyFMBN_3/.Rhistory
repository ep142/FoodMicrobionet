})
# diagnostic
if (debug_mode) {
output$taxa_menu_items <- renderText(taxa_agg_menu_items())
}
# the bar plot
# the first reactive, generates the table used for the bar plot and box plot
bb_plot_data <- eventReactive(
c(
input$ssamplestable_rows_all,
input$sample_agg_level,
input$sample_agg,
input$prev,
input$minab
),
{
# need to initialize with NULL?
bb_plot_list_1 <- vector(mode = "list", length = 4)
OTU_f_for_barplot <- my_summaries()[[3]]
# calculate sums of sequences by sample for the "Other" column
seq_sums_nofilter <- rowSums(my_summaries()[[3]])
# apply the prev and ab filter
OTU_f_for_barplot <- OTU_f_for_barplot[, tofilter()]
n_removed <- ncol(my_summaries()[[3]])-ncol(OTU_f_for_barplot)
# seq sums, filtered table
seq_sums_filter <- rowSums(OTU_f_for_barplot)
# difference
Other_column <- seq_sums_nofilter-seq_sums_filter
# add the column
OTU_f_for_barplot <- cbind(OTU_f_for_barplot, Other = Other_column)
# now melt and add the sample metadata for the first aggregation
# NOTE FOR SELF this must be replaced by pivot_longer
edge_table_filtered <- reshape2::melt(t(OTU_f_for_barplot))
colnames(edge_table_filtered)[1:3] <- c("source", "target", "weight")
if(length(sample_agg_menu_items()) == 4) {
sel_s_var <- c("label", "L1", "L4", "L6")
} else {
sel_s_var <- c("label", "foodId", "llabel", "L1", "L4", "L6")
}
sample_metadata_j <- dplyr::select_at(FMBNexp()[[4]], .vars = sel_s_var) %>%
dplyr::rename(target = label)
edge_table_filtered_j <- left_join(edge_table_filtered, sample_metadata_j)
bxp_edge_table <- edge_table_filtered_j
sum_abs <- bxp_edge_table %>%
group_by(target) %>%
dplyr::summarise(sumab = sum(weight, na.rm = T))
bxp_edge_table_r <- left_join(bxp_edge_table, sum_abs) %>%
mutate(relab = weight/sumab) %>%
mutate(relab_c = relab+0.00001)
# translating the select input; the name is the menu choice, the value is the actual variable
sample_menu_choice <- input$sample_agg
if(sample_menu_choice  == "none") {
if(FMBNexp()[[11]] == "sample"){
sample_agg_choice <- "label"
names(sample_agg_choice) <- FMBNexp()[[11]]
} else {
sample_agg_choice <- "llabel"
names(sample_agg_choice) <- FMBNexp()[[11]]
}
} else {
if(sample_menu_choice  == "exp. code") {
sample_agg_choice <- "llabel"
names(sample_agg_choice) <- "exp. code"
} else {
sample_agg_choice <- sample_menu_choice
names(sample_agg_choice) <- sample_menu_choice}
}
# that is: if "none" the variable used for joining is "label" but the name is either "sample" or "exp. code"
# now need to perform a group_by_at
# determine which of the sample group choices result in a number of items <= max_samples (see options)
sgroup_items <- sort(sapply(FMBNexp()[[4]][, sel_s_var], n_distinct, na.rm = T))
sgroup_items_pass <- names(sgroup_items)[which(sgroup_items <= max_samples)]
sample_grouping <- ifelse(
sample_agg_choice %in% sgroup_items_pass,
sample_agg_choice,
sgroup_items_pass[length(sgroup_items_pass)]
)
# returns "label" when aggr is exp. code and number of llabels <25
sgrouping_message_flag <- F # initialize the grouping message flag
# do not aggregate if FMBNexp()[[13]] == T
if(names(sample_agg_choice) == FMBNexp()[[11]] | FMBNexp()[[13]]) {
if ("label" %in% sgroup_items_pass) {
edge_table_filtered_j_s  <- edge_table_filtered_j[, 1:3] %>%
dplyr::rename(sweight = weight)
} else {
edge_table_filtered_j_s  <- edge_table_filtered_j %>%
group_by_at(.vars = c("source", sample_grouping)) %>%
summarise(sweight = sum(weight, na.rm = T))
sgrouping_message_flag <- T
sgrouping_message <-
paste("WARNING: too many categories, grouping by ",
sample_grouping,
" instead!",
sep = "")
showNotification(
sgrouping_message,
type = "message",
duration = 10,
closeButton = TRUE
)
}
} else {
if (sample_agg_choice %in% sgroup_items_pass) {
edge_table_filtered_j_s  <- edge_table_filtered_j %>%
group_by_at(.vars = c("source", sample_agg_choice)) %>%
summarise(sweight = sum(weight, na.rm = T))
} else {
edge_table_filtered_j_s  <- edge_table_filtered_j %>%
group_by_at(.vars = c("source", sample_grouping)) %>%
summarise(sweight = sum(weight, na.rm = T))
sgrouping_message_flag <- T
sgrouping_message <-
paste("WARNING: too many categories, grouping by ",
sample_grouping,
" instead!",
sep = "")
showNotification(
sgrouping_message,
type = "message",
duration = 10,
closeButton = TRUE
)
}
}
colnames(edge_table_filtered_j_s)[2] <- "target"
taxa_sel <- c("label", as.character(taxa_agg_menu_items()[-1]))
taxa_j <- dplyr::select_at(FMBNexp()[[5]], .vars = taxa_sel) %>%
dplyr::rename(source = label)
# join taxa info
edge_table_filtered_j_s_t <- left_join(edge_table_filtered_j_s, taxa_j)
bxp_edge_table_r_j <- left_join(bxp_edge_table_r, taxa_j)
# for diagnostic purposes the first element can be shown as a table
# change the first element of the list:
# alternatives are
# my_summaries()[[3]] the OTU table from my summaries
# FMBNexp()[[4]] the sample metadata table
# OTU_f_for_barplot the filtered OTU table (with the Other column)
# edge_table_filtered the melted table
# sample_metadata_j the sample metadata
# edge_table_filterd_j the edge table with metadata
# edge_table_filtered_j_s the edge table with metadata after aggregation by sample_agg
# FMBNexp()[[5]] the taxa metadata after aggregation (including NA columns)
# taxa_j the taxa metadata, with label renamed and just the colums in the tax agg menu
# edge_table_filtered_j_s_t edge table + taxa info (used by the box plot)
# bxp_edge_table_r the object for the box plot
bb_plot_list_1[[1]] <- bxp_edge_table_r_j
bb_plot_list_1[[2]] <- edge_table_filtered_j_s_t
bb_plot_list_1[[3]] <- bxp_edge_table_r_j
bb_plot_list_1[[4]] <- sample_grouping
bb_plot_list_1[[5]] <- taxa_j
return(bb_plot_list_1)
},
ignoreNULL = F
)
# the reactive for the bar plot, responds to the taxa aggregation menu but also to
# changes in other menus
bb_plot_data_2 <- eventReactive(
c(
input$ssamplestable_rows_all,
input$tax_agg_level,
input$sample_agg_level,
input$sample_agg,
input$taxa_agg,
input$prev,
input$minab
),{
bb_plot_list_2 <- vector(mode = "list", length = 3)
input_egde_table <- bb_plot_data()[[2]]
# determine which of the taxa group choices result in a number of items <= max_taxa (see options)
sel_t_vars <- c("source", as.character(taxa_agg_menu_items())[-1])
tgroup_items <- sapply(input_egde_table[, sel_t_vars], n_distinct, na.rm = T)
tgroup_items_pass <- names(tgroup_items)[which(tgroup_items<=max_taxa)]
taxa_grouping <- ifelse(
input$taxa_agg %in% tgroup_items_pass,
input$taxa_agg,
tgroup_items_pass[length(tgroup_items_pass)]
)
tgrouping_message_flag <- F # initialize the grouping message flag
if(input$taxa_agg == "none") {
if ("source" %in% tgroup_items_pass) {
edge_table  <- input_egde_table[, 1:3] %>%
dplyr::rename(weight = sweight)
} else {
edge_table  <- input_egde_table %>%
group_by_at(.vars = c(taxa_grouping, "target")) %>%
summarise(weight = sum(sweight, na.rm = T)) %>%
ungroup()
tgrouping_message_flag <- T
tgrouping_message <-
paste("WARNING: too many taxa, grouping by ",
taxa_grouping,
" instead!",
sep = "")
showNotification(
tgrouping_message,
type = "message",
duration = 10,
closeButton = TRUE
)
}
} else {
if (input$taxa_agg %in% tgroup_items_pass) {
edge_table  <- input_egde_table %>%
group_by_at(.vars = c(input$taxa_agg, "target")) %>%
summarise(weight = sum(sweight, na.rm = T)) %>%
ungroup()
} else{
edge_table  <- input_egde_table %>%
group_by_at(.vars = c(taxa_grouping, "target")) %>%
summarise(weight = sum(sweight, na.rm = T)) %>%
ungroup()
tgrouping_message_flag <- T
tgrouping_message <-
paste("WARNING: too many taxa, grouping by ",
taxa_grouping,
" instead!",
sep = "")
showNotification(
tgrouping_message,
type = "message",
duration = 10,
closeButton = TRUE
)
}
}
# number of distinct taxa
n_taxa <- n_distinct(edge_table[, 1], na.rm = F)
names(edge_table) <- c("source", "target", "abs_ab")
# transform NA in Other and sum if necessary, recode as a factor and move "Other"
# at the end if necessary, to provide a nicer graph
if(anyNA(edge_table$source)){
edge_table <- edge_table %>%
mutate(source = if_else(is.na(source),"Other",source)) %>%
group_by(source, target) %>%
summarise(abs_ab = sum(abs_ab, na.rm = T)) %>%
ungroup() %>%
mutate(source = factor(source, ordered = T))
if("Other" %in% levels(edge_table$source)){
edge_table <- edge_table %>%
mutate(source = forcats::fct_relevel(source, "Other", after = 0))
}
}
# the bar plot
bar_plot_title <- paste("Relative abundance,",
taxa_grouping,
sep = " ")
bar_plot_subtitle <- str_wrap(
paste("Only taxa with >",
input$prev,
"prevalence and >",
input$minab,
"abundance are shown. The others are aggregated as \"Other\".",
sep = " "),
width = 80
)
if (n_taxa>12) {
gpalette <- rpalette[1:n_taxa]
bar_plot <- ggplot(edge_table, mapping = aes(x = target, y = abs_ab, fill = source)) +
geom_col(position = "fill") +
scale_fill_manual(values = gpalette) +
labs(title = bar_plot_title,
subtitle = bar_plot_subtitle,
x= "Samples/Sample groups",
y= "Relative abundance",
fill = "Taxa") +
scale_x_discrete(labels = function(x) str_wrap(x, str_wrap_length)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
panel.background= element_rect(fill = "white"),
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5, size = 9))
} else {
bar_plot <- ggplot(edge_table, mapping = aes(x = target, y = abs_ab, fill = source)) +
geom_col(position = "fill") +
labs(title = bar_plot_title,
subtitle = bar_plot_subtitle,
x= "Samples/Sample groups",
y= "Relative abundance",
fill = "Taxa") +
scale_fill_brewer(type = "qual", palette = "Paired") +
scale_x_discrete(labels = function(x) str_wrap(x, str_wrap_length)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
panel.background= element_rect(fill = "white"),
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5, size = 9))
}
bb_plot_list_2[[1]] <- edge_table # also used as diagnostic
bb_plot_list_2[[2]] <- n_taxa
bb_plot_list_2[[3]] <- bar_plot
bb_plot_list_2[[4]] <- tgroup_items_pass
return(bb_plot_list_2)
},
ignoreNULL = F
)
# for diagnostic use
output$barplot_table <- if(debug_mode) {DT::renderDataTable(bb_plot_data()[[1]])} # or _1
output$barplot <- renderPlot(bb_plot_data_2()[[3]])
# the reactive for saving the bar plot
observeEvent(input$save_bar_plot, {
ggsave(
filename = file.path(
"output",
"tablesandplots",
paste(
input$fn_prefix,
as.integer(input$save_bar_plot),
"_bar_plot.",
g_ext,
sep = ""
)
),
plot = bb_plot_data_2()[[3]],
width = g_width,
height = g_height,
units = g_units,
dpi = g_dpi
)
showNotification(
"bar plot saved to /output/tablesandplots folder",
type = "message",
duration = 5,
closeButton = TRUE
)
})
# the reactives for the box plot ------------------------------------------
# the dynamic menu for the taxa categories
output$taxa_agg_bxp <- renderUI({
selectInput(
"taxa_agg_bx",
label = "taxa agg.",
choices = as.list(bb_plot_data_2()[[4]][-1]),
selected = "2",
multiple = FALSE
)
})
# the reactive for the taxa item menu
taxa_items <- eventReactive(
c(
input$ssamplestable_rows_all,
input$tax_agg_level,
input$sample_agg_level,
input$sample_agg,
input$taxa_agg,
input$prev,
input$minab,
input$taxa_agg_bx,
input$g_type,
input$taxa_agg_bx
),{
my_vars <- c("source", input$taxa_agg_bx)
my_items <- select_at(bb_plot_data()[[2]], .vars = my_vars)
my_item_list <- dplyr::distinct_at(my_items, .vars = input$taxa_agg_bx) %>%
select_at(.vars = input$taxa_agg_bx) %>%
pull()
return(my_item_list[complete.cases(my_item_list)])
}
)
# the contextual menu with the taxa items
output$sel_taxa <- renderUI({
selectInput(
"sel_taxa_items",
label = "select taxa",
choices = c("all",taxa_items()),
selected = "all",
multiple = TRUE
)
})
# the list containing data and boxplot
# NOTE it might make sense to add an option for selecting an arithmetic scale
bb_plot_data_3 <- eventReactive(
c(
input$ssamplestable_rows_all,
input$tax_agg_level,
input$sample_agg_level,
input$sample_agg,
input$taxa_agg,
input$prev,
input$minab,
input$taxa_agg_bx,
input$sel_taxa_items,
input$g_type
),
{
bb_plot_list_3 <- vector(mode = "list", length = 3)
bxp_starting_et <- bb_plot_data()[[3]]
# the sample aggregation level (max 25 cats. and can't be sample), this handles the case
# when no aggregation is possible. Depends on the menu in bar plot table
sample_agg_bp <- ifelse(bb_plot_data()[[4]] == "label", "target", bb_plot_data()[[4]])
# the taxa aggregation options (domain excluded)
taxa_item_names <- bb_plot_data_2()[[4]][-1]
# selected taxa category
sel_taxa_cat <- ifelse(is.null(input$taxa_agg_bx),"class",input$taxa_agg_bx)
# select variables and remove NAs
bxp_starting_et_2 <- bxp_starting_et %>%
select_at(.vars = c(sel_taxa_cat, sample_agg_bp, "relab", "relab_c"))
colnames(bxp_starting_et_2) <- c("taxa", "samples", "relab", "relab_c")
bxp_starting_et_2 <- dplyr::filter(bxp_starting_et_2, !is.na(taxa))
# now filter using the input$sel_taxa_items
if("all" %in% input$sel_taxa_items){
bxp_starting_et_3 <- bxp_starting_et_2
} else {
t_selection <- input$sel_taxa_items[which(input$sel_taxa_items != "all")]
if(length(t_selection)<2){
bxp_starting_et_3 <- bxp_starting_et_2
showNotification(
"you must select at least two taxa; all will be selected, try again",
type = "message",
duration = 5,
closeButton = TRUE
)
} else {
bxp_starting_et_3 <- bxp_starting_et_2 %>%
dplyr::filter(taxa %in% t_selection)
}
}
# the actual box plot, first by selecting everything given the category menu
box_plot_title <- paste("Abundance distribution,",
sel_taxa_cat,
sep = " ")
# handle rare case when sample_agg_bp == "label"
if(sample_agg_bp == "target"){
top_x_boxplot <- ggplot(bxp_starting_et_3, mapping = aes(x = taxa, y = relab_c))
if(input$g_type == "violin"){
top_x_boxplot <- top_x_boxplot +
geom_violin() +
geom_jitter(alpha = 0.2, width = 0.2) +
labs(x= "Taxa",
y= "rel.ab.") +
scale_x_discrete(labels = function(x) str_wrap(x, 15)) +
scale_y_log10(breaks = c(1E-5, 1E-4, 1E-3, 1E-2, 1E-1, 1)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 6))
} else {
top_x_boxplot <- top_x_boxplot +
geom_boxplot() +
geom_jitter(alpha = 0.2, width = 0.2) +
labs(x= "Taxa",
y= "rel.ab.") +
scale_x_discrete(labels = function(x) str_wrap(x, 15)) +
scale_y_log10(breaks = c(1E-5, 1E-4, 1E-3, 1E-2, 1E-1, 1)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 6))
}
} else {
top_x_boxplot <- ggplot(bxp_starting_et_3, mapping = aes(x = samples, y = relab_c))
if(input$g_type == "violin"){
top_x_boxplot <- top_x_boxplot +
geom_violin() +
geom_jitter(alpha = 0.2, width = 0.2) +
facet_wrap(~taxa) +
labs(x= "Samples/Sample groups",
y= "rel.ab.") +
scale_x_discrete(labels = function(x) str_wrap(x, 15)) +
scale_y_log10(breaks = c(1E-5, 1E-4, 1E-3, 1E-2, 1E-1, 1)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 6))
} else {
top_x_boxplot <- top_x_boxplot +
geom_boxplot() +
geom_jitter(alpha = 0.2, width = 0.2) +
facet_wrap(~taxa) +
labs(x= "Samples/Sample groups",
y= "rel.ab.") +
scale_x_discrete(labels = function(x) str_wrap(x, 15)) +
scale_y_log10(breaks = c(1E-5, 1E-4, 1E-3, 1E-2, 1E-1, 1)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 6))
}
}
# make the list
bb_plot_list_3[[1]] <- bxp_starting_et_3 # for diagnostic purposes
bb_plot_list_3[[2]] <- top_x_boxplot
return(bb_plot_list_3)
}
)
# diagnostic for box plot
output$boxplot_table <- if(debug_mode) {DT::renderDataTable(bb_plot_data_3()[[1]])}
# the boxplot
output$topxboxplot <- renderPlot(bb_plot_data_3()[[2]])
# the reactive for saving the box plot
observeEvent(input$save_box_plot, {
ggsave(
filename = file.path(
"output",
"tablesandplots",
paste(
input$fn_prefix,
as.integer(input$save_box_plot),
"_box_plot.",
g_ext,
sep = ""
)
),
plot = bb_plot_data_3()[[2]],
width = g_width,
height = g_height,
units = g_units,
dpi = g_dpi
)
showNotification(
"box plot saved to /output/tablesandplots folder",
type = "message",
duration = 5,
closeButton = TRUE
)
})
#   closing curly bracket for server
}
runApp()
